plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'idea'
    id 'jacoco'
    id 'org.inferred.processors' version '3.7.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "org.sonarqube" version "4.4.1.3373"
}

group 'com.devshawn'

mainClassName = 'com.devshawn.kafka.gitops.MainCommand'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
        vendor.set(JvmVendorSpec.AZUL)
    }
}

dependencies {
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.7.0'
    implementation platform('com.fasterxml.jackson:jackson-bom:2.16.1')
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    implementation 'info.picocli:picocli:4.7.5'

    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.1'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.2'

    annotationProcessor 'org.inferred:freebuilder:2.8.0'
    compileOnly 'org.inferred:freebuilder:2.8.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testCompileOnly group: 'junit', name: 'junit', version: '4.13.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    testImplementation group: 'org.apache.groovy', name: 'groovy', version: '4.0.19'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.3-groovy-4.0'
    testImplementation group: 'org.spockframework', name:'spock-junit4', version: '2.3-groovy-4.0'
    testImplementation group: 'cglib', name: 'cglib-nodep', version: '3.3.0'
    testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.1'
}

test {
    useJUnitPlatform()

    jvmArgs([
            "--add-opens", "java.base/java.util=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    ])
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        xml.outputLocation.set(file("${buildDir}/reports/jacoco/report.xml"))
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: [
                            '**/*_Builder*/**',
                    ])
        }))
    }
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'com.devshawn.kafka.gitops.MainCommand'
        )
    }
}

task buildExecutableJar(type: Exec) {
    dependsOn shadowJar
    commandLine "sh", "build.sh"
}

task buildRelease(type: Zip, group: "build") {
    dependsOn buildExecutableJar
    from("$buildDir/output")
}

sonar {
    skipProject = providers.environmentVariable("SONAR_TOKEN").getOrElse("").isBlank()
    properties {
        property "sonar.projectKey", "joschi_kafka-gitops"
        property "sonar.organization", "joschi"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
